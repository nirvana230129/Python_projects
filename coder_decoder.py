from tkinter import Tk, Canvas, Listbox, Button, messagebox, Entryclass Window:    def __init__(self, name='ciphers'):        # Создание окна        self.tk = Tk()        self.tk.title(name)        self.tk.geometry('800x600')        self.tk.resizable(False, False)        # Создание listbox        self.listbox = Listbox(height=4, width=22)        options = ["Caesar cipher", "Caesar decipher", "Codeword cipher", "Codeword cipher decipher"]        for i in range(len(options)):            self.listbox.insert(i, options[i])        self.listbox.pack(anchor='nw')        # Создание canvas        self.canvas: Canvas = Canvas(self.tk, width=800, height=500)        self.canvas.pack()        # Создание кнопки, подтверждающей выбор объекта listbox        self.button = Button(self.tk, text='Choose', command=lambda: self.choose())        self.button.place(x=20, y=100)        # Создание объектов для шифра Цезаря        self.caesar_cipher_string_entry = Entry(self.tk, width=15)        self.caesar_cipher_rot_entry = Entry(self.tk, width=5)        self.caesar_cipher_button = Button(self.tk, text='Encrypt', command=lambda: self.caesar_cipher())        self.caesar_cipher_string = self.canvas.create_text(530, 0, anchor='ne', text='String')        self.canvas.itemconfig(self.caesar_cipher_string, state='hidden')        self.caesar_cipher_rotate = self.canvas.create_text(530, 30, anchor='ne', text='Rotate')        self.canvas.itemconfig(self.caesar_cipher_rotate, state='hidden')        # Создание объектов для дешифратора Цезаря        self.caesar_cipher_decryption_string_entry = Entry(self.tk, width=15)        self.caesar_cipher_decryption_rot_entry = Entry(self.tk, width=5)        self.caesar_cipher_decryption_button = Button(self.tk, text='Decrypt',                                                      command=lambda: self.caesar_cipher_decryption())        self.caesar_cipher_decryption_string = self.canvas.create_text(530, 0, anchor='ne', text='Coded string')        self.canvas.itemconfig(self.caesar_cipher_decryption_string, state='hidden')        self.caesar_cipher_decryption_rotate = self.canvas.create_text(530, 30, anchor='ne', text='Rotate')        self.canvas.itemconfig(self.caesar_cipher_decryption_rotate, state='hidden')        # Создание объектов для шифра с кодовым словом        self.codeword_cipher_string_entry = Entry(self.tk, width=15)        self.codeword_cipher_codeword_entry = Entry(self.tk, width=15)        self.codeword_cipher_rot_entry = Entry(self.tk, width=5)        self.codeword_cipher_button = Button(self.tk, text='Encrypt', command=lambda: self.codeword_cipher())        self.codeword_cipher_string = self.canvas.create_text(530, 0, anchor='ne', text='String')        self.canvas.itemconfig(self.codeword_cipher_string, state='hidden')        self.codeword_cipher_codeword = self.canvas.create_text(530, 30, anchor='ne', text='Codeword')        self.canvas.itemconfig(self.codeword_cipher_codeword, state='hidden')        self.codeword_cipher_rotate = self.canvas.create_text(530, 60, anchor='ne', text='Rotate')        self.canvas.itemconfig(self.codeword_cipher_rotate, state='hidden')        # Создание объектов для дешифратора с кодовым словом        self.codeword_cipher_decryption_string_entry = Entry(self.tk, width=15)        self.codeword_cipher_decryption_codeword_entry = Entry(self.tk, width=15)        self.codeword_cipher_decryption_rot_entry = Entry(self.tk, width=5)        self.codeword_cipher_decryption_button = Button(self.tk, text='Decrypt',                                                        command=lambda: self.codeword_cipher_decryption())        self.codeword_cipher_decryption_string = self.canvas.create_text(530, 0, anchor='ne', text='Coded string')        self.canvas.itemconfig(self.codeword_cipher_decryption_string, state='hidden')        self.codeword_cipher_decryption_codeword = self.canvas.create_text(530, 30, anchor='ne', text='Codeword')        self.canvas.itemconfig(self.codeword_cipher_decryption_codeword, state='hidden')        self.codeword_cipher_decryption_rotate = self.canvas.create_text(530, 60, anchor='ne', text='Rotate')        self.canvas.itemconfig(self.codeword_cipher_decryption_rotate, state='hidden')        # Создание поля вывода        self.answer = self.canvas.create_text(200, 350, anchor='nw', font='Verdana 20')    def clear(self, exc):        if exc != 0:            self.caesar_cipher_string_entry.place_forget()            self.caesar_cipher_rot_entry.place_forget()            self.caesar_cipher_button.place_forget()            self.canvas.itemconfig(self.caesar_cipher_string, state='hidden')            self.canvas.itemconfig(self.caesar_cipher_rotate, state='hidden')        if exc != 1:            self.caesar_cipher_decryption_string_entry.place_forget()            self.caesar_cipher_decryption_rot_entry.place_forget()            self.caesar_cipher_decryption_button.place_forget()            self.canvas.itemconfig(self.caesar_cipher_decryption_string, state='hidden')            self.canvas.itemconfig(self.caesar_cipher_decryption_rotate, state='hidden')        if exc != 2:            self.codeword_cipher_string_entry.place_forget()            self.codeword_cipher_codeword_entry.place_forget()            self.codeword_cipher_rot_entry.place_forget()            self.codeword_cipher_button.place_forget()            self.canvas.itemconfig(self.codeword_cipher_string, state='hidden')            self.canvas.itemconfig(self.codeword_cipher_codeword, state='hidden')            self.canvas.itemconfig(self.codeword_cipher_rotate, state='hidden')        if exc != 3:            self.codeword_cipher_decryption_string_entry.place_forget()            self.codeword_cipher_decryption_codeword_entry.place_forget()            self.codeword_cipher_decryption_rot_entry.place_forget()            self.codeword_cipher_decryption_button.place_forget()            self.canvas.itemconfig(self.codeword_cipher_decryption_string, state='hidden')            self.canvas.itemconfig(self.codeword_cipher_decryption_codeword, state='hidden')            self.canvas.itemconfig(self.codeword_cipher_decryption_rotate, state='hidden')    def choose(self):        if not self.listbox.curselection():            messagebox.showinfo('Dear User!', 'Choose something!')            return        index = self.listbox.curselection()[0]        self.clear(index)        if index == 0:            self.caesar_cipher_string_entry.place(x=550, y=65)            self.caesar_cipher_rot_entry.place(x=550, y=95)            self.caesar_cipher_button.place(x=550, y=135)            self.canvas.itemconfig(self.caesar_cipher_string, state='normal')            self.canvas.itemconfig(self.caesar_cipher_rotate, state='normal')        elif index == 1:            self.caesar_cipher_decryption_string_entry.place(x=550, y=65)            self.caesar_cipher_decryption_rot_entry.place(x=550, y=95)            self.caesar_cipher_decryption_button.place(x=550, y=135)            self.canvas.itemconfig(self.caesar_cipher_decryption_string, state='normal')            self.canvas.itemconfig(self.caesar_cipher_decryption_rotate, state='normal')        elif index == 2:            self.codeword_cipher_string_entry.place(x=550, y=65)            self.codeword_cipher_codeword_entry.place(x=550, y=95)            self.codeword_cipher_rot_entry.place(x=550, y=125)            self.codeword_cipher_button.place(x=550, y=165)            self.canvas.itemconfig(self.codeword_cipher_string, state='normal')            self.canvas.itemconfig(self.codeword_cipher_codeword, state='normal')            self.canvas.itemconfig(self.codeword_cipher_rotate, state='normal')        elif index == 3:            self.codeword_cipher_decryption_string_entry.place(x=550, y=65)            self.codeword_cipher_decryption_codeword_entry.place(x=550, y=95)            self.codeword_cipher_decryption_rot_entry.place(x=550, y=125)            self.codeword_cipher_decryption_button.place(x=550, y=165)            self.canvas.itemconfig(self.codeword_cipher_decryption_string, state='normal')            self.canvas.itemconfig(self.codeword_cipher_decryption_codeword, state='normal')            self.canvas.itemconfig(self.codeword_cipher_decryption_rotate, state='normal')        self.tk.update()    def caesar_cipher(self):        string = self.caesar_cipher_string_entry.get()        rot = self.caesar_cipher_rot_entry.get()        for i in rot:            if i not in '0123456789+':                messagebox.showinfo("Error", "It's not the number!")                return        if not rot or '+' in rot[1:]:            messagebox.showinfo("Error", "It's not the number!")            return        self.canvas.itemconfig(self.answer, text=caesar_cipher(string, int(rot)))    def caesar_cipher_decryption(self):        string = self.caesar_cipher_decryption_string_entry.get()        rot = self.caesar_cipher_decryption_rot_entry.get()        for i in rot:            if i not in '0123456789+':                messagebox.showinfo("Error", "It's not the number!")                return        if not rot or '+' in rot[1:]:            messagebox.showinfo("Error", "It's not the number!")            return        self.canvas.itemconfig(self.answer, text=caesar_cipher_decryption(string, int(rot)))    def codeword_cipher(self):        string = self.codeword_cipher_string_entry.get()        codeword = self.codeword_cipher_codeword_entry.get()        rot = self.codeword_cipher_rot_entry.get()        for i in rot:            if i not in '0123456789+':                messagebox.showinfo("Error", "It's not the number!")                return        if not rot or '+' in rot[1:]:            messagebox.showinfo("Error", "It's not the number!")            return        self.canvas.itemconfig(self.answer, text=codeword_cipher(string, codeword, int(rot)))    def codeword_cipher_decryption(self):        string = self.codeword_cipher_decryption_string_entry.get()        codeword = self.codeword_cipher_decryption_codeword_entry.get()        rot = self.codeword_cipher_decryption_rot_entry.get()        for i in rot:            if i not in '0123456789+':                messagebox.showinfo("Error", "It's not the number!")                return        if not rot or '+' in rot[1:]:            messagebox.showinfo("Error", "It's not the number!")            return        self.canvas.itemconfig(self.answer, text=codeword_cipher_decryption(string, codeword, int(rot)))def caesar_cipher(string, rot):    if not string:        messagebox.showinfo('Error', 'String is empty!')        return    string = string.lower()    eng = 'abcdefghijklmnopqrstuvwxyz '    rus = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя '    for let in string:        if let not in eng + rus:            messagebox.showinfo('Error', 'Invalid character!')            return    abc = eng if string[0] in eng else rus    coded_string = ''    for i in string:        coded_string += abc[(abc.index(i) + rot) % len(abc)]    return coded_stringdef caesar_cipher_decryption(coded_string, rot):    if not coded_string:        messagebox.showinfo('Error', 'String is empty!')        return    coded_string = coded_string.lower()    eng = 'abcdefghijklmnopqrstuvwxyz '    rus = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя '    for let in coded_string:        if let not in eng + rus:            messagebox.showinfo('Error', 'Invalid character!')            return    abc = eng if coded_string[0] in eng else rus    decoded = ''    for i in coded_string:        decoded += abc[(abc.index(i) - rot) % len(abc)]    return decodeddef codeword_cipher(string, codeword, rot):    if not string:        messagebox.showinfo('Error', 'String is empty!')        return    string = string.lower()    eng = 'abcdefghijklmnopqrstuvwxyz '    rus = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя '    for let in string:        if let not in eng + rus:            messagebox.showinfo('Error', 'Invalid character!')            return    abc = eng if string[0] in eng else rus    codeword = list(codeword.lower())    for i in range(len(codeword) - 1, -1, -1):        if codeword[i] in codeword[:i]:            codeword.pop(i)    new_abc = codeword[:]    for i in abc:        if i not in codeword:            new_abc.append(i)    new_abc = new_abc[-rot + 1:] + new_abc[:-rot + 1]    coded_string = ''    for i in string:        index = abc.index(i)        coded_string += new_abc[index]    return coded_stringdef codeword_cipher_decryption(coded_string, codeword, rot):    if not coded_string:        messagebox.showinfo('Error', 'String is empty!')        return    coded_string = coded_string.lower()    eng = 'abcdefghijklmnopqrstuvwxyz '    rus = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя '    for let in coded_string:        if let not in eng + rus:            messagebox.showinfo('Error', 'Invalid character!')            return    abc = eng if coded_string[0] in eng else rus    codeword = list(codeword.lower())    for i in range(len(codeword) - 1, -1, -1):        if codeword[i] in codeword[:i]:            codeword.pop(i)    new_abc = codeword[:]    for i in abc:        if i not in codeword:            new_abc.append(i)    new_abc = new_abc[-rot + 1:] + new_abc[:-rot + 1]    decoded_string = ''    for i in coded_string:        index = new_abc.index(i)        decoded_string += abc[index]    return decoded_stringwindow = Window()window.tk.bind("<E>", lambda event: window.tk.destroy())window.tk.mainloop()